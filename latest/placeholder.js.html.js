tui.util.defineNamespace("fedoc.content", {});
fedoc.content["placeholder.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Generate custom placehoder on browsers not supported 'placehoder'\n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar util = require('./util.js');\n\nvar Placeholder,\n    isSupportPlaceholder,\n    browser = tui.util.browser,\n    hasComputedStyleFunc = window.getComputedStyle ? true : false,\n    KEYCODE_BACK = 8,\n    KEYCODE_TAB = 9;\n\nif (browser.msie &amp;&amp; (browser.version > 9 &amp;&amp; browser.version &lt;= 11)) {\n    util.addCssRule({\n        selector: ':-ms-input-placeholder',\n        css: 'color:#fff !important;text-indent:-9999px;'\n    });\n} else if (browser.chrome || browser.safari) {\n    util.addCssRule({\n        selector: 'input:-webkit-autofill',\n        css: '-webkit-box-shadow: 0 0 0 1000px white inset;'\n    });\n}\n\nisSupportPlaceholder = 'placeholder' in document.createElement('input') &amp;&amp; !(browser.msie &amp;&amp; browser.version &lt;= 11);\n\n/**\n * Create placeholder class\n * @class Placeholder\n * @constructor\n */\n Placeholder = tui.util.defineClass(/** @lends Tree.prototype */{\n     init: function() {\n         /**\n          * Array pushed 'input' tags in current page\n          * @type  {Array}\n          * @private\n          */\n         this._inputElems = [];\n\n         this.add();\n     },\n\n     /**\n      * When create dynamic 'input' tag and append on page, generate custom placeholder\n      * @param {HTMLElement[]} elements - All 'input' tags\n      * @returns {Boolean} If a browser support 'placeholder' property and has any condition, returns\n      * @api\n      */\n     add: function(elements) {\n         if (isSupportPlaceholder) {\n             return false;\n         }\n\n         if (elements) {\n             this._inputElems = this._inputElems.concat(tui.util.toArray(elements));\n         } else {\n             this._inputElems = tui.util.toArray(document.getElementsByTagName('input'));\n         }\n\n         if (this._inputElems.length) {\n             this._generatePlaceholder(this._inputElems);\n         }\n     },\n\n     /**\n      * Return style info of imported style\n      * @param  {HTMLElement} elem - First 'input' tag\n      * @returns {Object} Style info\n      * @private\n      */\n     _getInitStyle: function(elem) {\n         var computedObj,\n             styleInfo;\n\n         if (hasComputedStyleFunc) {\n             computedObj = window.getComputedStyle(elem, null);\n             styleInfo = {\n                 fontSize: computedObj.getPropertyValue('font-size'),\n                 fixedHeight: computedObj.getPropertyValue('line-height'),\n                 fixedWidth: computedObj.getPropertyValue('width')\n             };\n         } else {\n             computedObj = elem.currentStyle;\n             styleInfo = {\n                 fontSize: computedObj.fontSize,\n                 fixedHeight: computedObj.lineHeight,\n                 fixedWidth: computedObj.width\n             };\n         }\n\n         return styleInfo;\n     },\n\n     /**\n      * Generator virtual placeholders for browser not supported 'placeholder' property\n      * @private\n      */\n     _generatePlaceholder: function() {\n         var self = this;\n\n         tui.util.forEach(this._inputElems, function(elem) {\n             var type = elem.type;\n\n             if ((type === 'text' || type === 'password' || type === 'email') &amp;&amp;\n                 elem.getAttribute('placeholder')) {\n                 self._attachCustomPlaceholder(elem);\n             }\n         });\n     },\n\n     /**\n      * Attach a new custom placehoder tag after a selected 'input' tag and wrap 'input' tag\n      * @param  {HTMLElement} target - The 'input' tag\n      * @private\n      */\n     _attachCustomPlaceholder: function(target) {\n         var initStyle = this._getInitStyle(target),\n             fontSize = initStyle.fontSize,\n             fixedHeight = initStyle.fixedHeight,\n             wrapTag = document.createElement('span'),\n             placeholder = target.getAttribute('placeholder');\n\n         target.style.cssText = this._getInputStyle(fontSize, fixedHeight);\n\n         wrapTag.innerHTML = this._generateSpanTag(fontSize, placeholder);\n         wrapTag.appendChild(target.cloneNode());\n\n         target.parentNode.insertBefore(wrapTag, target.nextSibling);\n         target.parentNode.removeChild(target);\n\n         wrapTag.style.cssText = this._getWrapperStyle(initStyle.fixedWidth);\n\n         this._bindEventToCustomPlaceholder(wrapTag);\n     },\n\n     /**\n      * Bind event custom placehoder tag\n      * @param  {HTMLElement} target - The 'input' tag's wrapper tag\n      * @private\n      */\n     _bindEventToCustomPlaceholder: function(target) {\n         var inputTag = target.getElementsByTagName('input')[0],\n             spanTag = target.getElementsByTagName('span')[0],\n             spanStyle = spanTag.style;\n\n         util.bindEvent(spanTag, 'mousedown', function(e) {\n             inputTag.focus();\n         });\n\n         util.bindEvent(inputTag, 'keydown', function(e) {\n             var keyCode = e.which || e.keyCode;\n\n             if (!(keyCode === KEYCODE_BACK || keyCode === KEYCODE_TAB)) {\n                 spanStyle.display = 'none';\n             }\n         });\n\n         util.bindEvent(inputTag, 'keyup', function() {\n             if (inputTag.value === '') {\n                 spanStyle.display = 'inline-block';\n             }\n         });\n     },\n\n     /**\n      * Get style of 'input' tag's parent tag\n      * @param  {Number} fixedWidth - The 'input' tag's 'width' property value\n      * @returns {String} String of custom placehoder wrapper tag's style\n      * @private\n      */\n     _getWrapperStyle: function(fixedWidth) {\n         return 'position:relative;display:inline-block;*display:inline;zoom:1;width:' + fixedWidth + ';';\n     },\n\n     /**\n      * Get style of 'input' tag\n      * @param  {Number} fontSize - The 'input' tag's 'font-size' property value\n      * @param  {Number} fixedHeight - The 'input' tag's 'line-height' property value\n      * @returns {String} String of 'input' tag's style\n      * @private\n      */\n     _getInputStyle: function(fontSize, fixedHeight) {\n         return 'font-size:' + fontSize + ';height:' + fixedHeight + ';line-height:' + fixedHeight + ';';\n     },\n\n     /**\n      * [function description]\n      * @param  {Number} fontSize - Current ''input' tag's 'font-size' property value\n      * @param  {String} placehoderText - Current 'input' tag's value\n      * @returns {String} String of custom placehoder tag\n      * @private\n      */\n     _generateSpanTag: function(fontSize, placehoderText) {\n         var html = '&lt;span style=\"position:absolute;left:0;top:50%;color:#aaa;';\n\n         html += 'display:inline-block;margin-top:' + (-(parseFloat(fontSize, 10) / 2 + 1)) + 'px;';\n         html += 'font-size:' + fontSize + '\" UNSELECTABLE=\"on\">' + placehoderText + '&lt;/span>';\n\n         return html;\n     }\n});\n\nmodule.exports = new Placeholder();\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"